array_length(Test.a) :: 5.0 :: number
array_length(Test.b) :: 3.0 :: number
array_length(Test.c) :: 5.0 :: number
array_length(Test.d) :: 6.0 :: number
array_length(Test.e) :: 5.0 :: number
array_length(Test.f) :: 5.0 :: number

prev(Test.a) :: 1.0 :: number
prev_p(Test.a, 0) :: 2.0 :: number
prev_p(Test.a, -1) :: 3.0 :: number
prev_p(Test.a, 1) :: 1.0 :: number
prev_p(Test.a, 2) :: :: number
prev_p(Test.a, 20, 22) :: 22.0 :: number

next(Test.a) :: 3.0 :: number
next_p(Test.a, 0) :: 2.0 :: number
next_p(Test.a, 1) :: 3.0 :: number
next_p(Test.a, -1) :: 1.0 :: number
next_p(Test.a, 20, 23) :: 23.0 :: number

first(Test.a) :: 1.0 :: number
first_p(Test.a, 0) :: 1.0 :: number
first_p(Test.a, 1) :: 2.0 :: number
first_p(Test.a, -1) :: :: number
first_p(Test.a, -1, 24) :: 24.0 :: number
first_p(Test.f, 4) :: :: number

first(Test.a) :: 1.0 :: number
first_p(Test.a, 0) :: 1.0 :: number
first_p(Test.a, 1) :: 2.0 :: number
first_p(Test.a, -1) :: :: number
first_p(Test.a, -1, 25) :: 25.0 :: number

last(Test.a) :: 5.0 :: number
last_p(Test.a, 0) :: 5.0 :: number
last_p(Test.a, 1) :: 4.0 :: number
last_p(Test.a, -1) :: :: number
last_p(Test.a, -1, 26) :: 26.0 :: number

text(Test.a) :: "2.0" :: text
text(Test.b) :: "b" :: text
text(Test.c) :: "60.0" :: text
text(Test.d) :: "90.0" :: text
text(Test.e) :: "2016/01/01 01:01:01" :: text

Test.a == Test.a :: true :: bool
Test.a == next(Test.a) :: false :: bool
Test.a != Test.a :: false :: bool
Test.a != next(Test.a) :: true :: bool
Test.a == prev_p(Test.a, 3) :: false :: bool
Test.a != prev_p(Test.a, 3) :: true :: bool
(1/0) == prev_p(Test.a, 3) :: true :: bool
0 == prev_p(Test.a, 3) :: true :: bool
(1/0) != prev_p(Test.a, 3) :: false :: bool
0 != prev_p(Test.a, 3) :: false :: bool
2 == Test.a :: true :: bool
2 != Test.a :: false :: bool
prev_p(Test.a, 3) - 6 :: :: number
default(Test.na, 6) - 6 :: 0.0 :: number

Test.b == Test.b :: true :: bool
Test.b == next(Test.b) :: false :: bool
Test.b != Test.b :: false :: bool
Test.b != next(Test.b) :: true ::bool
Test.b == prev_p(Test.b, 3) :: false :: bool
Test.b != prev_p(Test.b, 3) :: true :: bool
prev_p(Test.b, 3) == prev_p(Test.b, 3) :: true :: bool
prev_p(Test.b, 3) != prev_p(Test.b, 3) :: false :: bool
'b' == Test.b :: true :: bool
'b' != Test.b :: false :: bool
