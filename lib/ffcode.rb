require './formula_fields.rb'
include FormulaFields

module TestCode
  @code = [
    # Test booleans, logical operators and if expressions
    ['True || True', BooleanType.new(true)],
    ['True || False', BooleanType.new(true)],
    ['False || True', BooleanType.new(true)],
    ['False || False', BooleanType.new(false)],
    ['True && True', BooleanType.new(true)],
    ['True && False', BooleanType.new(false)],
    ['False && True', BooleanType.new(false)],
    ['False && False', BooleanType.new(false)],
    ['True == True', BooleanType.new(true)],
    ['True == False', BooleanType.new(false)],
    ['False == True', BooleanType.new(false)],
    ['False == False', BooleanType.new(true)],
    ['True != True', BooleanType.new(false)],
    ['True != False', BooleanType.new(true)],
    ['False != True', BooleanType.new(true)],
    ['False != False', BooleanType.new(false)],
    ['!True', BooleanType.new(false)],
    ['!False', BooleanType.new(true)],
    ['!False && False', BooleanType.new(false)],
    ['if(True, 1, 2)', NumberType.new(1)],
    ['if(False, 1, 2)', NumberType.new(2)],
    ['if (True, 1, 2)', NumberType.new(1)],
    ['if(1 > 2, False, True) == !(1 > 2)', BooleanType.new(true)],
    ['1 == 1', BooleanType.new(true)],
    ['1 == 2', BooleanType.new(false)],
    ['1 != 1', BooleanType.new(false)],
    ['1 != 2', BooleanType.new(true)],
    ['0.1 + 0.2 == 0.3', BooleanType.new(true)],
    ['0.00001 + 0.00002 == 0.00003', BooleanType.new(true)],
    ['1000.1 + 1000.2 == 2000.3', BooleanType.new(true)],
    # ['10000000.1 + 10000000.2 == 20000000.3', BooleanType.new(true)],
    ['1 < 2', BooleanType.new(true)],
    ['1 < 1', BooleanType.new(false)],
    ['1 < 0', BooleanType.new(false)],
    ['1 <= 2', BooleanType.new(true)],
    ['1 <= 1', BooleanType.new(true)],
    ['1 <= 0', BooleanType.new(false)],
    ['1 > 2', BooleanType.new(false)],
    ['1 > 1', BooleanType.new(false)],
    ['1 > 0', BooleanType.new(true)],
    ['1 >= 2', BooleanType.new(false)],
    ['1 >= 1', BooleanType.new(true)],
    ['1 >= 0', BooleanType.new(true)],
    ['"cat" == "cat"', BooleanType.new(true)],
    ['"cat" == "dog"', BooleanType.new(false)],
    ['"cat" != "cat"', BooleanType.new(false)],
    ['"cat" != "dog"', BooleanType.new(true)],
    ['"banana" < "apple"', BooleanType.new(false)],
    ['"banana" < "banana"', BooleanType.new(false)],
    ['"banana" < "carrot"', BooleanType.new(true)],
    ['"banana" <= "apple"', BooleanType.new(false)],
    ['"banana" <= "banana"', BooleanType.new(true)],
    ['"banana" <= "carrot"', BooleanType.new(true)],
    ['"banana" > "apple"', BooleanType.new(true)],
    ['"banana" > "banana"', BooleanType.new(false)],
    ['"banana" > "carrot"', BooleanType.new(false)],
    ['"banana" >= "apple"', BooleanType.new(true)],
    ['"banana" >= "banana"', BooleanType.new(true)],
    ['"banana" >= "carrot"', BooleanType.new(false)],
    ['True || False && False || False', BooleanType.new(false)],
    ['False || False && False || True', BooleanType.new(false)],

    # Test the number type and associated math and number libraries
    ['1 + 2 + 3 + 4 + 5', NumberType.new(15)],
    ['-1 ^ 4', NumberType.new(1)],
    ['"dog" + "cat" * -2', TextType.new('dogtactac')],
    ['13231321 % 31', NumberType.new(25)],
    ['Math.pi', NumberType.new(Math::PI)],
    ['Math.sin(Math.pi)', NumberType.new(Math.sin(Math::PI))],
    ['Math.atan2(0, -1)', NumberType.new(Math::PI)],
    ['Math.atan2(-1, -1)', NumberType.new(Math.atan2(-1, -1))],
    ['Math.log10(1000)', NumberType.new(3)],
    ['Math.log(16, 4)', NumberType.new(2)],
    ['Math.mean(Test.a)', NumberType.new(3)],
    ['Math.min(1, 4)', NumberType.new(1)],
    ['Math.max(1, 4)', NumberType.new(4)],
    ['Math.array_min(Test.a)', NumberType.new(1)],
    ['Math.array_max(Test.a)', NumberType.new(5)],
    ['5/0', NumberType.new(nil)],
    ['9999^9999', NumberType.new(nil)],
    ['5.to_text()', TextType.new('5.0')],
    ['0.to_text()', TextType.new('0.0')],
    ['-5.to_text()', TextType.new('-5.0')],
    ['5.to_timestamp()', TimestampType.new(DateTime.new(1970, 1, 1, 0, 0, 5))],
    ['0.to_timestamp()', TimestampType.new(DateTime.new(1970, 1, 1, 0, 0, 0))],
    ['-5.to_timestamp()', TimestampType.new(DateTime.new(1969, 12, 31, 23, 59, 55))],
    ['135.to_latitude()', LatitudeType.new(45)],
    ['45.to_latitude()', LatitudeType.new(45)],
    ['0.to_latitude()', LatitudeType.new(0)],
    ['-45.to_latitude()', LatitudeType.new(-45)],
    ['-135.to_latitude()', LatitudeType.new(-45)],
    ['135.to_latitude_degrees()', LatitudeType.new(45)],
    ['45.to_latitude_degrees()', LatitudeType.new(45)],
    ['0.to_latitude_degrees()', LatitudeType.new(0)],
    ['-45.to_latitude_degrees()', LatitudeType.new(-45)],
    ['-135.to_latitude_degrees()', LatitudeType.new(-45)],
    ['(3 * Math.pi / 4).to_latitude_radians()', LatitudeType.new(45)],
    ['(Math.pi / 4).to_latitude_radians()', LatitudeType.new(45)],
    ['0.to_latitude_radians()', LatitudeType.new(0)],
    ['(-Math.pi / 4).to_latitude_radians()', LatitudeType.new(-45)],
    ['(-3 * Math.pi / 4).to_latitude_radians()', LatitudeType.new(-45)],
    ['225.to_longitude()', LongitudeType.new(-135)],
    ['135.to_longitude()', LongitudeType.new(135)],
    ['0.to_longitude()', LongitudeType.new(0)],
    ['-135.to_longitude()', LongitudeType.new(-135)],
    ['-225.to_longitude()', LongitudeType.new(135)],
    ['225.to_longitude_degrees()', LongitudeType.new(-135)],
    ['135.to_longitude_degrees()', LongitudeType.new(135)],
    ['0.to_longitude_degrees()', LongitudeType.new(0)],
    ['-135.to_longitude_degrees()', LongitudeType.new(-135)],
    ['-225.to_longitude_degrees()', LongitudeType.new(135)],
    ['(5 * Math.pi / 4).to_longitude_radians()', LongitudeType.new(-135)],
    ['(3 * Math.pi / 4).to_longitude_radians()', LongitudeType.new(135)],
    ['0.to_longitude_radians()', LongitudeType.new(0)],
    ['-(3 * Math.pi / 4).to_longitude_radians()', LongitudeType.new(-135)],
    ['-(5 * Math.pi / 4).to_longitude_radians()', LongitudeType.new(135)],

    # Test array class and array library
    ['Test.a.type()', TextType.new('Number')],
    ['Test.b.type()', TextType.new('Text')],
    ['Test.c.type()', TextType.new('Latitude')],
    ['Test.d.type()', TextType.new('Longitude')],
    ['Test.e.type()', TextType.new('Timestamp')],
    ['Test.a.curr()', NumberType.new(2)],
    ['Test.a.curr(0)', NumberType.new(2)],
    ['Test.a.curr(-1)', NumberType.new(1)],
    ['Test.a.curr(1)', NumberType.new(3)],
    ['Test.a.curr(20, 21)', NumberType.new(21)],
    ['Test.a.prev()', NumberType.new(1)],
    ['Test.a.prev(0)', NumberType.new(1)],
    ['Test.a.prev(-1)', NumberType.new(2)],
    ['Test.a.prev(1)', NumberType.new(nil)],
    ['Test.a.prev(20, 22)', NumberType.new(22)],
    ['Test.a.next()', NumberType.new(3)],
    ['Test.a.next(0)', NumberType.new(3)],
    ['Test.a.next(1)', NumberType.new(4)],
    ['Test.a.next(-1)', NumberType.new(2)],
    ['Test.a.next(20, 23)', NumberType.new(23)],
    ['Test.a.at()', NumberType.new(1)],
    ['Test.a.at(0)', NumberType.new(1)],
    ['Test.a.at(1)', NumberType.new(2)],
    ['Test.a.at(-1)', NumberType.new(nil)],
    ['Test.a.at(-1, 24)', NumberType.new(24)],
    ['Test.a.first()', NumberType.new(1)],
    ['Test.a.first(0)', NumberType.new(1)],
    ['Test.a.first(1)', NumberType.new(2)],
    ['Test.a.first(-1)', NumberType.new(nil)],
    ['Test.a.first(-1, 25)', NumberType.new(25)],
    ['Test.a.last()', NumberType.new(5)],
    ['Test.a.last(0)', NumberType.new(5)],
    ['Test.a.last(1)', NumberType.new(4)],
    ['Test.a.last(-1)', NumberType.new(nil)],
    ['Test.a.last(-1, 26)', NumberType.new(26)],
    ['Test.a.range(1, 3)', ArrayType.new([2, 3, 4], :number)],
    ['Test.a.range(1, -3)', ArrayType.new([2, 1], :number)],
    ['Test.a.range(0, 0)', ArrayType.new([], :number)],
    ['Test.a.to_text()', TextType.new('[1.0, 2.0, 3.0, 4.0, 5.0]')],
    ['Test.b.to_text()', TextType.new('[a, b, c]')],
    ['Test.c.to_text()', TextType.new('[30.0, 60.0, 90.0, 60.0, 30.0]')],
    ['Test.d.to_text()', TextType.new('[45.0, 90.0, 135.0, -180.0, -135.0, -90.0]')],
    ['Test.e.to_text()', TextType.new('[2015/01/01 01:01:01, 2016/01/01 01:01:01, 2017/01/01 01:01:01, 2018/01/01 01:01:01, 2019/01/01 01:01:01]')],
    ['Test.a.reverse()', ArrayType.new([5, 4, 3, 2, 1], :number)],
    ['Array.repeat(1, 5)', ArrayType.new([1, 1, 1, 1, 1], :number)],
    ['Array.repeat("a", 3)', ArrayType.new(['a', 'a', 'a'], :text)],
    ['Array.repeat(70.to_latitude(), 3)', ArrayType.new([70, 70, 70], :latitude)],
    ['Array.repeat(70.to_longitude(), 3)', ArrayType.new([70, 70, 70], :longitude)],
    ['Array.repeat("2001-1-1".to_timestamp(), 3)', ArrayType.new([DateTime.new(2001, 1, 1)] * 3, :latitude)],
    ['Array.count(5, 3)', ArrayType.new([5, 6, 7], :number)],
    ['Array.count(5, -3)', ArrayType.new([5, 4, 3], :number)],

    # Test text
    ['"dogs".length()', NumberType.new(4)],
    ['"dogs".capitalize()', TextType.new('Dogs')],
    ['"dogs".uppercase()', TextType.new('DOGS')],
    ['"DOGS".lowercase()', TextType.new('dogs')],
    ['"dOGs".swapcase()', TextType.new('DogS')],
    ['"dogs".reverse()', TextType.new('sgod')],
    ['"   dogs  ".trim()', TextType.new('dogs')],
    ['"dogs".substring(1,3)', TextType.new('og')],
    ['"dogs".substring(-1, 20)', TextType.new('dogs')],
    ['"dogs".substring(0,4).uppercase()', TextType.new('DOGS')],
    ['"1".to_number()', NumberType.new(1)],
    ['"1".to_number(2)', NumberType.new(1)],
    ['"a".to_number()', NumberType.new(nil)],
    ['"a".to_number(2)', NumberType.new(2)],
    ['"2001-1-1 01:01:01".to_timestamp()', TimestampType.new(DateTime.new(2001, 1, 1, 1, 1, 1))],
    ['"2001-1-1 1:01".to_timestamp()', TimestampType.new(DateTime.new(2001, 1, 1, 1, 1, 0))],
    ['"2001-1-1 1".to_timestamp()', TimestampType.new(DateTime.new(2001, 1, 1, 1, 0, 0))],
    ['"2001-1-1".to_timestamp()', TimestampType.new(DateTime.new(2001, 1, 1, 0, 0, 0))],
    ['"2001-1".to_timestamp()', TimestampType.new(nil)],
    ['"2001".to_timestamp()', TimestampType.new(nil)],
    ['"mudwolf".to_timestamp()', TimestampType.new(nil)],
    ['"2001-1-1 01:01:01".to_timestamp(Test.t4)', TimestampType.new(DateTime.new(2001, 1, 1, 1, 1, 1))],
    ['"2001-1-1 1:01".to_timestamp(Test.t4)', TimestampType.new(DateTime.new(2001, 1, 1, 1, 1, 0))],
    ['"2001-1-1 1".to_timestamp(Test.t4)', TimestampType.new(DateTime.new(2001, 1, 1, 1, 0, 0))],
    ['"2001-1-1".to_timestamp(Test.t4)', TimestampType.new(DateTime.new(2001, 1, 1, 0, 0, 0))],
    ['"mudwolf".to_timestamp(Test.t4)', TimestampType.new(DateTime.new(2015, 8, 25, 17, 31, 0))],
    ['"8/25/2015 01:01:01".to_timestamp()', TimestampType.new(nil)],
    ['"-135".to_latitude()', LatitudeType.new(-45)],
    ['"-45".to_latitude()', LatitudeType.new(-45)],
    ['"0".to_latitude()', LatitudeType.new(0)],
    ['"45".to_latitude()', LatitudeType.new(45)],
    ['"135".to_latitude()', LatitudeType.new(45)],
    ['"mudwolf".to_latitude()', LatitudeType.new(nil)],
    ['"-135".to_latitude(Test.y3)', LatitudeType.new(-45)],
    ['"-45".to_latitude(Test.y3)', LatitudeType.new(-45)],
    ['"0".to_latitude(Test.y3)', LatitudeType.new(0)],
    ['"45".to_latitude(Test.y3)', LatitudeType.new(45)],
    ['"135".to_latitude(Test.y3)', LatitudeType.new(45)],
    ['"mudwolf".to_latitude(Test.y3)', LatitudeType.new(75)],
    ['"225".to_longitude()', LongitudeType.new(-135)],
    ['"135".to_longitude()', LongitudeType.new(135)],
    ['"0".to_longitude()', LongitudeType.new(0)],
    ['"-135".to_longitude()', LongitudeType.new(-135)],
    ['"-225".to_longitude()', LongitudeType.new(135)],
    ['"mudwolf".to_longitude()', LongitudeType.new(nil)],
    ['"225".to_longitude(Test.x1)', LongitudeType.new(-135)],
    ['"135".to_longitude(Test.x1)', LongitudeType.new(135)],
    ['"0".to_longitude(Test.x1)', LongitudeType.new(0)],
    ['"-135".to_longitude(Test.x1)', LongitudeType.new(-135)],
    ['"-225".to_longitude(Test.x1)', LongitudeType.new(135)],
    ['"mudwolf".to_longitude(Test.x1)', LongitudeType.new(75)],

    # Test location library and latitude and longitude types
    ['Test.x1.to_number()', NumberType.new(75)],
    ['Test.x1.to_text()', TextType.new('75.0')],
    ['Test.x1.to_degrees()', NumberType.new(75)],
    ['Test.x1.to_radians()', NumberType.new(75 * Math::PI / 180)],
    ['Test.y2.to_number()', NumberType.new(90)],
    ['Test.y2.to_text()', TextType.new('90.0')],
    ['Test.y2.to_degrees()', NumberType.new(90)],
    ['Test.y2.to_radians()', NumberType.new(90 * Math::PI / 180)],
    ['Location.distance(Test.x1, Test.y1, Test.x2, Test.y2)', NumberType.new(1.5707963267948966)],

    # Test timestamp library and type
    ['Test.t1.to_number()', NumberType.new(1440408660)],
    ['Test.t5.second()', NumberType.new(32)],
    ['Test.t5.minute()', NumberType.new(41)],
    ['Test.t5.hour()', NumberType.new(13)],
    ['Test.t5.day()', NumberType.new(26)],
    ['Test.t5.weekday()', NumberType.new(4)],
    ['Test.t5.week()', NumberType.new(35)],
    ['Test.t5.month()', NumberType.new(8)],
    ['Test.t5.year()', NumberType.new(2015)],
    ['Test.t5.am_pm()', TextType.new('PM')],
    ['Test.t5.weekday_name()', TextType.new('Wednesday')],
    ['Test.t5.month_name()', TextType.new('August')],
    ['Time.elapsed(Test.t5, Test.t4)', NumberType.new(72632)],
    ['Time.elapsed(Test.t5, Test.t4, "seconds")', NumberType.new(72632)],
    ['Time.elapsed(Test.t5, Test.t4, "minutes")', NumberType.new(1210.5333333333333)],
    ['Time.elapsed(Test.t5, Test.t4, "hours")', NumberType.new(20.175555555555555)],
    ['Time.elapsed(Test.t5, Test.t4, "days")', NumberType.new(0.8406481481481481)],
    ['Time.elapsed(Test.t5, Test.t4, "weeks")', NumberType.new(0.1200925925925926)],
    ['Time.elapsed(Test.t5, Test.t4, "months")', NumberType.new(0.027619397462720737)],
    ['Time.elapsed(Test.t5, Test.t4, "years")', NumberType.new(0.002301616455226728)],
    ['Test.t1.offset(5, "seconds")', TimestampType.new(DateTime.new(2015, 8, 24, 9, 31, 5))],
    ['Test.t1.offset(5, "minutes")', TimestampType.new(DateTime.new(2015, 8, 24, 9, 36, 0))],
    ['Test.t1.offset(5, "hours")', TimestampType.new(DateTime.new(2015, 8, 24, 14, 31, 0))],
    ['Test.t1.offset(5, "days")', TimestampType.new(DateTime.new(2015, 8, 29, 9, 31, 0))],
    ['Test.t1.offset(5, "weeks")', TimestampType.new(DateTime.new(2015, 9, 28, 9, 31, 0))],
    ['Test.t1.offset(5, "months")', TimestampType.new(DateTime.new(2016, 1, 24, 9, 31, 0))],
    ['Test.t1.offset(5, "years")', TimestampType.new(DateTime.new(2020, 8, 24, 9, 31, 0))],
    ['Test.t1 < Test.t2', BooleanType.new(true)],
    ['Test.t1 < Test.t1', BooleanType.new(false)],
    ['Test.t2 < Test.t1', BooleanType.new(false)],
    ['Test.t1 <= Test.t2', BooleanType.new(true)],
    ['Test.t1 <= Test.t1', BooleanType.new(true)],
    ['Test.t2 <= Test.t1', BooleanType.new(false)],
    ['Test.t1 > Test.t2', BooleanType.new(false)],
    ['Test.t1 > Test.t1', BooleanType.new(false)],
    ['Test.t2 > Test.t1', BooleanType.new(true)],
    ['Test.t1 >= Test.t2', BooleanType.new(false)],
    ['Test.t1 >= Test.t1', BooleanType.new(true)],
    ['Test.t2 >= Test.t1', BooleanType.new(true)],
    ['Test.t1 == Test.t2', BooleanType.new(false)],
    ['Test.t1 == Test.t1', BooleanType.new(true)],
    ['Test.t2 == Test.t1', BooleanType.new(false)],
    ['Test.t1 != Test.t2', BooleanType.new(true)],
    ['Test.t1 != Test.t1', BooleanType.new(false)],
    ['Test.t2 != Test.t1', BooleanType.new(true)],

    # Everything here should throw an exception
    # TODO: rewrite as another part of testing
    ['!1', NumberType.new(nil)],
    ['1 && 2', NumberType.new(nil)],
    ['True < False', NumberType.new(nil)],
    ['if(1, 1, 1)', NumberType.new(nil)],
    ['if(True, 1, "1")', NumberType.new(nil)],
    ['Array.count == Math.pi', NumberType.new(nil)],
    ['"Array.count" == Math.pi', NumberType.new(nil)],
    ['Array.repeat(Array, 20)', NumberType.new(nil)],
    ['Array.count(1, 2) ^ Array', NumberType.new(nil)],
    ['FUMBLE', NumberType.new(nil)],
    ['Array.FUMBLE', NumberType.new(nil)],
    ['5.FUMBLE', NumberType.new(nil)],
    ['Array("dogs")', NumberType.new(nil)],
    ['Math.prod(5, 5, 5)', NumberType.new(nil)],
    ['Test.a.to_text(5)', NumberType.new(nil)],
    ['Math.prod("dogs")', NumberType.new(nil)],
    ["\n", NumberType.new(nil)]
  ]

  def self.code
    @code
  end
end
